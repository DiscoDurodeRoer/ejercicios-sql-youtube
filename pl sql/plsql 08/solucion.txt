18.Crea un procedimiento al que le pasaremos el dni_cliente y la matricula. El procedimiento debera controlar en las ventas de los coches(tabla vende) los siguientes supuestos:
	A.SI NO EXISTE UN REGISTRO CON ESE DNI_CLIENTE Y ESA MATRICULA SALTARA A LA ZONA DE EXCEPCIONES Y MOSTRARA UN MENSAJE
	"NO EXISTE LA VENTA INTRODUCIDA"
	B.SI EXISTE LA VENTA INTRODUCIDA:
		I.MOSTRARA EL PRECIO ANTIGUO ||
		II.ACTUALIZARA EL PRECIO SUBIENDO 1000 EUROS
		III. DEVOLVERA EN UN PARAMETRO DE SALIDA DEL PROCEDIMIENTO(PS_NUEVO_PRECIO) EL PRECIO NUEVO TRAS LA ACTUALIZACION
CREA UN BLOQUE ANONIMO QUE LLAME AL PROCEDIMIENTO ANTERIOR Y MUESTRE EL PRECIO NUEVO DEVUELTO POR EL PROCEDIMIENTO.

create or replace procedure actualizaVenta(
  p_dni_cliente vende.dni_cliente%type,
  p_matricula vende.matricula%type,
  ps_nuevo_precio out vende.precio%type 
)
as
  venta vende%rowtype;
begin
    
    select * into venta
    from vende
    where dni_cliente = p_dni_cliente
    and matricula = p_matricula;

    DBMS_OUTPUT.PUT_line('el precio antiguo es ' || venta.precio);
      
    ps_nuevo_precio :=  venta.precio + 1000;

    update vende 
    set precio = ps_nuevo_precio
    where dni_cliente = p_dni_cliente
    and matricula = p_matricula;

    
EXCEPTION
  WHEN no_data_found then
    DBMS_OUTPUT.PUT_line('No existe la venta introducida');

end;
/

declare
  v_dni_cliente vende.dni_cliente%type := &dni;
  v_matricula vende.matricula%type := &matricula;
  v_nuevo_precio vende.precio%type; 
begin

  actualizaVenta(v_dni_cliente, v_matricula, v_nuevo_precio);
  if v_nuevo_precio is not null then
    DBMS_OUTPUT.PUT_line('el nuevo precio es ' || v_nuevo_precio);
  end if;

end;
/